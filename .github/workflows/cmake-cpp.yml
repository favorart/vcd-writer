name: Cmake C/C++ CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. Windows, Release, latest MSVC
      # 2. Linux, Release, latest GCC
      # 3. Macos, Release, latest Clang
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      # These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build all
      # Build the program and tests with the given configuration.
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Check build complete
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      continue-on-error: true
      shell: bash
      # Check an existance of the binary files
      run: |
        find . -type f \( -name "*vcdwriter*.a" -o -name "*vcdwriter*.lib" \) -print -quit &&
        find . -type f \( -name "*vcdwriter*.so" -o -name "*vcdwriter*.dylib" -o -name "*vcdwriter*.dll" \) -print -quit &&
        find . -type f \( -name "main_exec" -o -name "main_exec.exe" \) -print -quit &&
        find . -type f \( -name "test_exec" -o -name "test_exec.exe" \) -print -quit

    - name: Run the single test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      continue-on-error: true
      if: runner.os != 'Windows'
      # Check the program's base input file output equals the expected output
      run: >
        ./main_exec &&
        diff  dump.vcd  $GITHUB_WORKSPACE/compare.vcd

    - name: Run all unit-tests
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute all tests defined by the CMake configuration.
      run: >
        ctest --build-config ${{ matrix.build_type }}
